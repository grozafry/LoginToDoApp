{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\aadar\\\\My Projects\\\\LoginToDoApp\\\\components\\\\SavedNote.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TaskNotDone from \"./../assets/task_incomplete.png\";\nimport TaskDone from \"./../assets/task_done.png\";\nimport Delete_Task from \"./../assets/delete_task.png\";\nimport Edit_Task from \"./../assets/edit_task.png\";\nimport Done_Editing from \"./../assets/Verified_Email.png\";\n\nvar SavedNote = function (_Component) {\n  _inherits(SavedNote, _Component);\n\n  var _super = _createSuper(SavedNote);\n\n  function SavedNote(props) {\n    var _this;\n\n    _classCallCheck(this, SavedNote);\n\n    _this = _super.call(this);\n\n    _this.change_status = function () {\n      _this.setState({\n        'Task_Status': _this.state.Task_Status == TaskNotDone ? TaskDone : TaskNotDone\n      });\n    };\n\n    _this.delete_task = function () {\n      if (_this.state.task) {\n        Alert.alert('Delete?', \"Are you sure you want to delete the task \" + _this.state.task + '?', [{\n          text: 'Confirm',\n          onPress: function onPress() {\n            return _this.setState({\n              'deletedTask': 'none'\n            });\n          }\n        }, {\n          text: 'Deny'\n        }], {\n          cancelable: true\n        });\n      } else {\n        _this.setState({\n          'deletedTask': 'none'\n        });\n      }\n    };\n\n    _this.edit_task = function () {\n      _this.setState({\n        'Edit_Status': _this.state.enableEditing ? Edit_Task : Done_Editing,\n        'enableEditing': !_this.state.enableEditing\n      });\n    };\n\n    _this.state = {\n      Task_Status: TaskNotDone,\n      deletedTask: 'flex',\n      enableEditing: props.text == '' ? true : false,\n      Edit_Status: props.text == '' ? Done_Editing : Edit_Task,\n      task: props.text\n    };\n    return _this;\n  }\n\n  _createClass(SavedNote, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var mainbox = StyleSheet.flatten([styles.maincontainer, {\n        display: this.state.deletedTask\n      }]);\n      return React.createElement(View, {\n        style: mainbox,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 17\n        }\n      }, React.createElement(View, {\n        style: styles.taskstatusbox,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }\n      }, React.createElement(TouchableHighlight, {\n        onPress: function onPress() {\n          return _this2.change_status();\n        },\n        style: styles.taskdone,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 25\n        }\n      }, React.createElement(Image, {\n        source: this.state.Task_Status,\n        style: styles.logo,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 29\n        }\n      }))), React.createElement(View, {\n        style: styles.taskbox,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }\n      }, React.createElement(TextInput, {\n        editable: this.state.enableEditing,\n        defaultValue: this.state.task,\n        placeholder: '',\n        placeholderTextColor: 'black',\n        onChangeText: function onChangeText(task) {\n          return _this2.setState({\n            task: task\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 25\n        }\n      })), React.createElement(TouchableOpacity, {\n        underlayColor: \"#000\",\n        style: styles.edittextbox,\n        onPress: function onPress() {\n          return _this2.edit_task();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }\n      }, React.createElement(Image, {\n        source: this.state.Edit_Status,\n        style: styles.logo,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 25\n        }\n      })), React.createElement(TouchableOpacity, {\n        underlayColor: \"#000\",\n        style: styles.deletetext,\n        onPress: function onPress() {\n          return _this2.delete_task();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }\n      }, React.createElement(Image, {\n        source: Delete_Task,\n        style: styles.logo,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 25\n        }\n      })));\n    }\n  }]);\n\n  return SavedNote;\n}(Component);\n\nexport { SavedNote as default };\nvar styles = StyleSheet.create({\n  maincontainer: {\n    flex: 1,\n    margin: 8,\n    shadowOpacity: 0.5,\n    flexDirection: 'row',\n    height: 45,\n    borderRadius: 5,\n    backgroundColor: 'lightgray'\n  },\n  taskstatusbox: {\n    flex: 0.7,\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRightWidth: 0.5\n  },\n  taskdone: {\n    justifyContent: 'center',\n    alignItems: 'center',\n    marginHorizontal: 10,\n    height: 12,\n    width: 12\n  },\n  taskbox: {\n    justifyContent: 'center',\n    paddingLeft: 5,\n    flex: 5,\n    borderRightWidth: 0.5\n  },\n  edittextbox: {\n    width: 36,\n    paddingHorizontal: 3,\n    alignItems: 'flex-end',\n    justifyContent: 'center',\n    backgroundColor: '#01796F'\n  },\n  deletetext: {\n    width: 36,\n    paddingHorizontal: 3,\n    alignItems: 'flex-end',\n    justifyContent: 'center',\n    borderTopRightRadius: 5,\n    borderBottomRightRadius: 5,\n    backgroundColor: 'darkred'\n  },\n  logo: {\n    width: 30,\n    height: 30\n  }\n});","map":{"version":3,"sources":["C:/Users/aadar/My Projects/LoginToDoApp/components/SavedNote.js"],"names":["React","Component","TaskNotDone","TaskDone","Delete_Task","Edit_Task","Done_Editing","SavedNote","props","change_status","setState","state","Task_Status","delete_task","task","Alert","alert","text","onPress","cancelable","edit_task","enableEditing","deletedTask","Edit_Status","mainbox","StyleSheet","flatten","styles","maincontainer","display","taskstatusbox","taskdone","logo","taskbox","edittextbox","deletetext","create","flex","margin","shadowOpacity","flexDirection","height","borderRadius","backgroundColor","alignItems","justifyContent","borderRightWidth","marginHorizontal","width","paddingLeft","paddingHorizontal","borderTopRightRadius","borderBottomRightRadius"],"mappings":"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","sourcesContent":["//App.js => HomeScreen.js => Welcome.js\r\n//                       |=> SavedNote.js\r\n\r\n/* This function maintains flatlist of tasks stored in tasks.json => ./../tasks.json and those added using AddNoteButton => ./AddNoteButton.js*/\r\n\r\n/* importing required modules */\r\nimport React, { Component } from 'react'\r\nimport {View, TextInput, Alert, Image, StyleSheet, TouchableHighlight, TouchableOpacity} from 'react-native'\r\n\r\n/*Importing Button Images */\r\nimport TaskNotDone from './../assets/task_incomplete.png';   //icon for incomplete task\r\nimport TaskDone from './../assets/task_done.png';            //icon for completed task\r\nimport Delete_Task from './../assets/delete_task.png';       //icon for delete task\r\nimport Edit_Task from './../assets/edit_task.png'            //icon for un-edited task\r\nimport Done_Editing from './../assets/Verified_Email.png'     //icon during task being edited\r\n\r\n/* This function styles and maintains list of items in Tasks passed via HomeScreen.js\r\nalso enables to delete or edit existing items in the tasks list*/\r\n\r\n//Start of export\r\nexport default class SavedNote extends Component{\r\n\r\n    //Initial State\r\n    constructor (props) {\r\n        super()\r\n            this.state = ({\r\n                Task_Status:TaskNotDone,    //image uri variable for task status\r\n                deletedTask:'flex',         // removes deleted tasks from view\r\n                enableEditing:(props.text=='' ? true:false),            //Enables/Disables editing for tasks (a newly created note will be editable) \r\n                Edit_Status:(props.text=='' ? Done_Editing:Edit_Task),  // image uri handler for editing state of a task\r\n                task:props.text\r\n            })\r\n    }\r\n    \r\n    // This function changes image of edit icon based on edit state of a task\r\n    change_status = () => {\r\n        this.setState({\r\n                'Task_Status':(this.state.Task_Status==TaskNotDone ? TaskDone:TaskNotDone)\r\n            })\r\n        }\r\n\r\n    // This function prompts user confirmation if user request deletion of a task\r\n    delete_task = () => {\r\n        if (this.state.task) {\r\n            Alert.alert('Delete?', \"Are you sure you want to delete the task \" + this.state.task + '?', [{text:'Confirm', onPress: () => this.setState({\r\n                'deletedTask':'none'\r\n            })}, {text:'Deny',}], {cancelable:true} ) \r\n        } else {\r\n            this.setState({\r\n            'deletedTask':'none'\r\n        })            \r\n        }\r\n    }\r\n\r\n    // This function enables editing of a task when edit icon is clicked/touched  \r\n    edit_task = () => {\r\n            this.setState({\r\n                'Edit_Status':(this.state.enableEditing? Edit_Task:Done_Editing),\r\n                'enableEditing': (!this.state.enableEditing),\r\n            })\r\n    }\r\n\r\n//Start of render function (handles all styles and events in notes except adding new notes)\r\n    render () {\r\n\r\n        //this variable enables to remove tasks when requested to delete\r\n        var mainbox = StyleSheet.flatten([\r\n            styles.maincontainer,{\r\n                display:this.state.deletedTask\r\n            }\r\n        ])\r\n\r\n        // var task = this.props.text;    //minimized hussle of entering long variable\r\n        \r\n        //Start return\r\n        return(\r\n            //main Container containing all children items\r\n                <View style={mainbox}>\r\n\r\n                    {/* {child} this button allows to change task status [change_status], has a variable image uri Task_Status*/}\r\n                    <View style={styles.taskstatusbox}>\r\n                        <TouchableHighlight onPress={() => this.change_status()} style={styles.taskdone}>\r\n                            <Image source={this.state.Task_Status} style={styles.logo} /> \r\n                        </TouchableHighlight>\r\n                    </View>\r\n\r\n                    {/* {child} this container shows the task, editable/uneditable if allowed through edit icon ->next child element */}\r\n                    <View style={styles.taskbox}>\r\n                        <TextInput editable={this.state.enableEditing} defaultValue={this.state.task} placeholder={''} placeholderTextColor={'black'} onChangeText={(task) => this.setState({task})} />\r\n                    </View>\r\n\r\n                    {/* {child} this button allows the task to be modified [edit_task], has a variable image uri Edit_Status */}\r\n                    <TouchableOpacity underlayColor=\"#000\"  style={styles.edittextbox} onPress={ () => this.edit_task()}>\r\n                        <Image source={this.state.Edit_Status} style={styles.logo} />                            \r\n                    </TouchableOpacity>\r\n\r\n                    {/* {child} this button allows user to delete a task [delete_task], but not until user confirms in the following confirmation dialog*/}\r\n                    <TouchableOpacity underlayColor=\"#000\"  style={styles.deletetext} onPress={ () => this.delete_task()}>\r\n                        <Image source={Delete_Task} style={styles.logo} />                            \r\n                    </TouchableOpacity>\r\n\r\n                </View>\r\n                //End of main Container\r\n        )\r\n        //End of return\r\n    }\r\n    //End of render\r\n}\r\n//End of export\r\n\r\n/*Styles (in order of heirarchy)*/\r\nconst styles = StyleSheet.create({\r\n\r\n    //main container with all child items\r\n    maincontainer: {\r\n        flex:1,\r\n        margin:8,\r\n        shadowOpacity:0.5,\r\n        flexDirection:'row',\r\n        height:45,\r\n        borderRadius:5,\r\n        backgroundColor:'lightgray'\r\n    },\r\n\r\n    //box containing task status icon and button\r\n    taskstatusbox: {\r\n        flex:0.7,\r\n        alignItems:'center',\r\n        justifyContent:'center',\r\n        borderRightWidth:0.5\r\n    },\r\n\r\n    //button style for task status\r\n    taskdone: {\r\n        justifyContent:'center',\r\n        alignItems:'center',\r\n        marginHorizontal:10,\r\n        height:12,\r\n        width:12,\r\n    },\r\n\r\n    //box containing task details\r\n    taskbox: {\r\n        justifyContent:'center',\r\n        paddingLeft:5,\r\n        flex:5,\r\n        borderRightWidth:0.5\r\n    },\r\n\r\n    //button containing icon for task edit status\r\n    edittextbox: {\r\n        width:36,\r\n        paddingHorizontal:3,\r\n        alignItems:'flex-end',\r\n        justifyContent:'center',\r\n        backgroundColor:'#01796F'\r\n    },\r\n\r\n    //button containing icon for task deletion\r\n    deletetext: {\r\n        width:36,\r\n        paddingHorizontal:3,\r\n        alignItems:'flex-end',\r\n        justifyContent:'center',\r\n        borderTopRightRadius:5,\r\n        borderBottomRightRadius:5,\r\n        backgroundColor:'darkred'\r\n    },\r\n\r\n    //icon styles for all image\r\n    logo:{\r\n        width:30,\r\n        height:30\r\n    },\r\n})\r\n\r\n"]},"metadata":{},"sourceType":"module"}